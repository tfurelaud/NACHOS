#ifdef CHANGED

#include "copyright.h"
#include "system.h"
#include "synchconsole.h"
#include "synch.h"

static Semaphore *readAvail;
static Semaphore *writeDone;

static void ReadAvailHandler(void *arg) { (void) arg; readAvail->V(); }
static void WriteDoneHandler(void *arg) { (void) arg; writeDone->V(); }

int copyStringFromMachine(int from, char *to, unsigned size){
  for(int i=0; i<size; i++){
    if(from=='\0'){
      return i;
    }
    int val;
    machine->ReadMem(from,1,&val);
    *to = (char)val;
    to++;
  }
  from = '\0';
  int val;
  machine->ReadMem(from,1,&val);
  *to = (char)val;
  to++;
  return size;
}

SynchConsole::SynchConsole(const char *in, const char *out){
  readAvail = new Semaphore("read avail", 0);
  writeDone = new Semaphore("write done", 0);
  #ifdef CHANGED
  console = new Console(in, out, ReadAvailHandler, WriteDoneHandler, 0);
  #endif //CHANGED
}

SynchConsole::~SynchConsole(){
  delete console;
  delete writeDone;
  delete readAvail;
}

void SynchConsole::SynchPutChar(int ch){
  #ifdef CHANGED
  console->PutChar(ch);
  writeDone->P();
#endif //CHANGED
}

int SynchConsole::SynchGetChar(){
  #ifdef CHANGED
  readAvail->P();
  int ch = console->GetChar();
  return ch;
#endif //CHANGED
}

void SynchConsole::SynchPutString(const char s[]){
  int i = 0;
  while(s[i]!='\0'){
    console->PutChar(i);
    writeDone->P();
    i++;
  }
}

void SynchConsole::SynchGetString(char *s, int n){
  // ...
}

#endif // CHANGED
